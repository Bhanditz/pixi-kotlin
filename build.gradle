group = 'net.abesto.kotlin.js.pixi'
version = '0.0.1'

buildscript {
	ext.kotlinVersion = '0.1-SNAPSHOT'
	ext.kotlinGradlePluginVersion = '0.1-SNAPSHOT'
	ext.kotlinHome = "${System.env.HOME}/Library/Application Support/IdeaIC14/Kotlin"
	ext.kotlincJs = "$kotlinHome/kotlinc/bin/kotlinc-js"
	ext.kotlinJsLib = "$kotlinHome/kotlinc/lib/kotlin-jslib.jar"
	ext.kotlinJs = "$kotlinHome/kotlinc/lib/kotlin.js"

	repositories {
		mavenCentral()
		maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinGradlePluginVersion"
		classpath 'org.ajoberstar:gradle-git:0.10.1'
	}
}

subprojects {
	apply plugin: 'kotlin'

	task copyKotlinJs(type: Copy) {
		from "$kotlinJs"
		into "$projectDir/web/js/lib"
	}

	repositories {
		mavenCentral()
		maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
	}

	dependencies {
		compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
	}
}

project(':pixi-kotlin') {
	ext.libraryFiles = [kotlinJsLib]

	dependencies {
		compile files(kotlinJsLib)
	}

	task build(overwrite: true) {
		logger.info "Definitions are not compiled, we only build a source jar"
	}

	task jarSources(type:Jar){
		from sourceSets.main.allSource
		classifier = 'source'
	}

	kdoc.kdocArgs.docConfig.ignorePackages << "kotlin"
	kdoc.kdocArgs.docConfig.ignorePackages << "org.w3c"
	kdoc.kdocArgs.docConfig.ignorePackages << "net.abesto.kotlin.extensions"
	kdoc.kdocArgs.docConfig.title = "pixi-kotlin reference"
	kdoc.kdocArgs.docConfig.packageSummaryText["net.abesto.kotlin.js.pixi"] = "Kotlin bindings for Pixi.js"
	kdoc.kdocArgs.docConfig.addPackageLink("http://jetbrains.github.io/kotlin/versions/snapshot/apidocs/", "kotlin")
	kdoc.kdocArgs.docConfig.addPackageLink("http://docs.oracle.com/javase/6/docs/api/", "java", "org.w3c.dom", "org.xml.sax", "org.omg", "org.ietf.jgss")

}

project(':examples') {
	task generateIndexHtml(type: Copy) {
		from "src/templates"
		into "web"
		include("index.html")
		expand(project: project)
	}

	apply plugin: 'org.ajoberstar.github-pages'
	githubPages {
		repoUri = 'git@github.com:abesto/pixi-kotlin.git'
		pages {
			from("${project(":pixi-kotlin").buildDir}/docs/kdoc") { into "kdoc" }
			from("${project(":pixi-kotlin").projectDir}/resources/docs/kdoc-assets") { into "kdoc" }
			from generateIndexHtml.outputs.files
			subprojects.each { example ->
				from("${example.projectDir}/web") { into example.name }
			}
		}
	}
	publishGhPages.dependsOn += [generateIndexHtml, project(":pixi-kotlin").kdoc]
	publishGhPages.dependsOn += subprojects.collect {"${it.name}:generateExampleIndexHtml"}

	subprojects {
		ext.jsFile = "app"
		ext.output = { "$projectDir/web/js/app/${jsFile}.js" }
		ext.libraryFiles = [kotlinJsLib, project(':pixi-kotlin').tasks.jarSources.archivePath]
		dependencies {
			compile files(kotlinJsLib)
			compile project(':pixi-kotlin')
		}

		task copyKotlinSourceIntoWeb(type: Copy) {
			from "src/main/kotlin"
			into "web/kotlin"
			rename("main.kt", "main.kt.txt")
		}

		ext.extraHead = ""
		ext.extraBody = ""
		ext.listTitle = { "Example ${project.name}"}
		ext.originalExampleUrl = "http://www.goodboydigital.com/pixijs/examples/${project.name}/"
		ext.originalExampleText = { project.originalExampleUrl }
		ext.originalExampleSourceUrl = "view-source:http://www.goodboydigital.com/pixijs/examples/${project.name}/"
		ext.originalExampleSourceText = { project.originalExampleSourceUrl }
		ext.title = "pixi.js example ${project.name} (kotlin)"
		task generateExampleIndexHtml(type: Copy) {
			from "${project(":examples").projectDir}/src/templates"
			into "web"
			include("subproject-index.html")
			rename("subproject-index.html", "index.html")
			expand(project: project)
		}

		task build(overwrite: true) {
			dependsOn copyKotlinJs
			dependsOn ':pixi-kotlin:jarSources'
			dependsOn copyKotlinSourceIntoWeb
			dependsOn generateExampleIndexHtml

			ext.sources = sourceSets.main.allSource.files
			inputs.files sources

			outputs.file output()

			doLast {
				exec {
					commandLine("bash", kotlincJs, "-verbose", "-version",
							"-output", output(),
							"-library-files", libraryFiles.join(','), *sources.toList())
				}
			}
		}

		task test(overwrite: true) {
			logger.info "JS testing not implemented"
		}
	}
}

project(':examples:pairs') {
	description = "Neat little pairs game Emanuele Feronato"
	ext.listTitle = { "Pairs Game" }
	ext.originalExampleUrl = "http://www.emanueleferonato.com/2014/02/26/complete-html5-concentration-game-made-with-pixi-js/"
	ext.originalExampleSourceUrl = originalExampleUrl
	ext.originalExampleSourceText = { "Same as above, scroll down a bit on the page" }
}

// Examples from http://www.pixijs.com/examples/
project(':examples:1') { description = "Basics" }
project(':examples:2') { description = "Using a Sprite Sheet"}
project(':examples:3') { description = "MovieClip"}

project(':examples:4') {
	description = "Lot o' Sprites"
	ext.title = "Pixi Balls by Photon Storm (Kotlin port)"

	ext.extraHead = """
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link rel="stylesheet" href="storm.css">
"""

	ext.extraBody = """
<a href="http://www.photonstorm.com"><img src="assets/photonstorm.png" width="121" height="18" id="photonstorm" title="Photon Storm" /></a>
<a href="http://www.html5gamedevs.com/topic/59-pixijs-has-landed/"><img src="assets/pixi.png" width="56" height="22" id="pixi" title="pixi.js" /></a>
<input type="button" id="rnd" value="Randomise" />
<div id="sx">SX: 0<br />SY: 0</div>"""
}

project(':examples:5') {
	description = "Lot o' Sprites 2"
	ext.title = "Pixi Morph by Photon Storm (Kotlin port)"

	ext.extraHead = """
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link rel="stylesheet" href="storm.css">
"""

	ext.extraBody = """
<a href="http://www.photonstorm.com"><img src="assets/photonstorm.png" width="121" height="18" id="photonstorm" title="Photon Storm" /></a>
<a href="http://www.html5gamedevs.com/topic/59-pixijs-has-landed/"><img src="assets/pixi.png" width="56" height="22" id="pixi" title="pixi.js" /></a>
"""
}

project(':examples:6') { description = "Interactivity" }

project(':examples:7') {
	description = "Transparent Renderer"

	ext.extraHead = """
<style>
  #textHolder{
    width: 400px;
	margin-top: 24px;
  }
</style>
"""

	ext.extraBody = """
<div>Note: in the original the text has the color set for the background of the canvas.
	 This is a bug in Pixi that has been fixed since.</div>

<div id="textHolder">Hi there, I'm some HTML text... blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
   blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
    blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah</div>
"""
}

