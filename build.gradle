group = 'net.abesto.kotlin.js.pixi'
version = '0.0.1'

class KotlinJsExtension {
	List<String> libraryFiles = []
	String kotlinVersion = "0.1-SNAPSHOT"
	String jsFile = "app"
	String output = "web/js/app/${jsFile}.js"
	String stdlibJsFile = "web/js/lib/kotlin.js"
	Boolean generateSourcemap = true
}

class KotlinJs implements Plugin<Project> {
	void apply(Project project) {
		project.configurations { compileKotlinJs }

		project.apply plugin: 'kotlin'
		project.extensions.create("kotlinJs", KotlinJsExtension)

		if (project.kotlinJs.kotlinVersion == "0.1-SNAPSHOT") {
			project.repositories {
				maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
			}
		}

		def deps = [
				"org.jetbrains.kotlin:kotlin-compiler:${project.kotlinJs.kotlinVersion}",
				"org.jetbrains.kotlin:kotlin-js-library:${project.kotlinJs.kotlinVersion}",
				"org.jetbrains.kotlin:kotlin-stdlib:${project.kotlinJs.kotlinVersion}"
		]

		project.dependencies {
			compileKotlinJs deps  // findJar resolves the configuration, making the user of the plugin unable to add
			                      // new dependencies, so we need a separate configuration
			compile deps  // but let's also add the libraries as compile dependencies
		}

		project.ext.findJar = { artifact -> project.configurations.compileKotlinJs.find { it.name.startsWith(artifact) } }
		project.kotlinJs.libraryFiles << project.findJar("kotlin-js-library")

		project.task('build', overwrite: true) {}

		project.task('buildKotlinJsStdlib', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
			source = project.zipTree(project.findJar("kotlin-js-library")).matching{include "*.js"}
			dest = "${project.projectDir}/${project.kotlinJs.stdlibJsFile}"
		}

		project.afterEvaluate {
			if (project.sourceSets.main.allSource.empty) {
				project.logger.info("No kotlin source files found in project '${project.name}', not compiling anything to JS.")
			} else {
				project.task('compileKotlinJs', type: JavaExec) {
					dependsOn project.buildKotlinJsStdlib

					def sources = project.sourceSets.main.allSource.files
					def output = "${project.projectDir}/${project.kotlinJs.output}"
					inputs.files sources
					outputs.files output, "${output}.map"

					main "org.jetbrains.jet.cli.js.K2JSCompiler"
					maxHeapSize = "256M"
					minHeapSize = "32M"
					jvmArgs = ["-noverify"]

					classpath = project.files(
							project.findJar("kotlin-compiler"),
							project.findJar("kotlin-runtime")
					)

					if (project.kotlinJs.generateSourcemap) {
						args "-source-map"
					}
					args "-verbose", "-version",
						 "-output", output, "-library-files", project.kotlinJs.libraryFiles.join(',')
					args sources.toList()

					doLast {
						if (project.kotlinJs.generateSourcemap) {
							def file = new File("${project.projectDir}/${project.kotlinJs.output}.map")
							def text = file.text
							sources.each {
								text = text.replace("file://${it}", "${it.name}.txt")
							}
							file.write(text)
						}
					}
				}

				project.tasks.build.dependsOn project.compileKotlinJs

				if (project.kotlinJs.generateSourcemap) {
					def outputDir = new File(project.kotlinJs.output).parent

					project.task('copyKotlinSources', type: Copy) {
						from project.sourceSets.main.allSource.files
						into outputDir
						rename '(.*)\\.kt', '$1.kt.txt'
					}

					project.tasks.build.dependsOn project.copyKotlinSources
				}
			}
		}

		project.task('test', overwrite: true) {
			logger.info "KotlinJS testing not implemented"
		}

		project.sourceSets {
			main.java.srcDirs += 'src/main/kotlin'
			test.java.srcDirs += 'src/test/kotlin'
		}
	}
}

buildscript {
	ext {
		kotlinGradlePluginVersion = '0.1-SNAPSHOT'
	}

	repositories {
		mavenCentral()
		jcenter()
		maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinGradlePluginVersion"
		classpath "com.eriwen:gradle-js-plugin:1.12.1"
		classpath 'org.ajoberstar:gradle-git:0.10.1'
	}
}

subprojects {
	apply plugin: KotlinJs

	repositories {
		mavenCentral()
	}

}

project(':pixi-kotlin') {
	task build(overwrite: true) {
		logger.info "Definitions are not compiled, we only build a source jar"
	}

	task jarSources(type:Jar){
		from sourceSets.main.allSource
		classifier = 'source'
	}

	kdoc.kdocArgs.docConfig.ignorePackages << "kotlin"
	kdoc.kdocArgs.docConfig.ignorePackages << "org.w3c"
	kdoc.kdocArgs.docConfig.ignorePackages << "net.abesto.kotlin.js.extensions"
	kdoc.kdocArgs.docConfig.ignorePackages << "net.abesto.kotlin.js.workaround"
	kdoc.kdocArgs.docConfig.title = "pixi-kotlin reference"
	kdoc.kdocArgs.docConfig.packageSummaryText["net.abesto.kotlin.js.pixi"] = "Kotlin bindings for Pixi.js"
	kdoc.kdocArgs.docConfig.addPackageLink("http://jetbrains.github.io/kotlin/versions/snapshot/apidocs/", "kotlin")
	kdoc.kdocArgs.docConfig.addPackageLink("http://docs.oracle.com/javase/6/docs/api/", "java", "org.w3c.dom", "org.xml.sax", "org.omg", "org.ietf.jgss")

}

project(':examples') {
	task generateIndexHtml(type: Copy) {
		from "src/templates"
		into "web"
		include("index.html")
		expand(project: project)
		outputs.upToDateWhen { false }
	}

	apply plugin: 'org.ajoberstar.github-pages'
	githubPages {
		repoUri = 'git@github.com:abesto/pixi-kotlin.git'
		pages {
			from "${projectDir}/web"
			from("${project(":pixi-kotlin").buildDir}/docs/kdoc") { into "kdoc" }
			from("${project(":pixi-kotlin").projectDir}/resources/docs/kdoc-assets") { into "kdoc" }
			subprojects.each { example ->
				from("${example.projectDir}/web") { into example.name }
			}
		}
	}
	publishGhPages.dependsOn += [generateIndexHtml, project(":pixi-kotlin").kdoc]
	publishGhPages.dependsOn += subprojects.collect {"${it.name}:build"}
	publishGhPages.dependsOn += subprojects.collect {"${it.name}:generateExampleIndexHtml"}

	subprojects {
		dependencies {
			compile project(':pixi-kotlin')
		}

		kotlinJs.jsFile = "app"
		kotlinJs.libraryFiles << project(':pixi-kotlin').tasks.jarSources.archivePath

		ext {
			isFullscreen = false
			extraHead = ""
			extraBody = ""
			listTitle = { "Example ${project.name}" }
			originalExampleUrl = "http://www.goodboydigital.com/pixijs/examples/${project.name.replaceFirst('^0', '')}/"
			originalExampleText = { project.originalExampleUrl }
			originalExampleSourceUrl = { "view-source:${project.originalExampleUrl}" }
			originalExampleSourceText = { project.originalExampleSourceUrl() }
			title = "pixi.js example ${project.name} (kotlin)"
		}
		task generateExampleIndexHtml(type: Copy) {
			from "${project(":examples").projectDir}/src/templates"
			into "web"
			include("subproject-index.html")
			rename("subproject-index.html", "index.html")
			expand(project: project)
			outputs.upToDateWhen { false }
		}

		build.dependsOn ':pixi-kotlin:jarSources', generateExampleIndexHtml
	}
}

project(':examples:pairs') {
	description = "Neat little pairs game Emanuele Feronato"
	ext.listTitle = { "Pairs Game" }
	ext.originalExampleUrl = "http://www.emanueleferonato.com/2014/02/26/complete-html5-concentration-game-made-with-pixi-js/"
	ext.originalExampleSourceUrl = { originalExampleUrl }
	ext.originalExampleSourceText = { "Same as above, scroll down a bit on the page" }
}

// Examples from http://www.pixijs.com/examples/
project(':examples:01') { description = "Basics" }
project(':examples:02') { description = "Using a Sprite Sheet"}
project(':examples:03') { description = "MovieClip"}

project(':examples:04') {
	description = "Lot o' Sprites"
	ext.title = "Pixi Balls by Photon Storm (Kotlin port)"

	ext.extraHead = """
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link rel="stylesheet" href="storm.css">
"""

	ext.extraBody = """
<a href="http://www.photonstorm.com"><img src="assets/photonstorm.png" width="121" height="18" id="photonstorm" title="Photon Storm" /></a>
<a href="http://www.html5gamedevs.com/topic/59-pixijs-has-landed/"><img src="assets/pixi.png" width="56" height="22" id="pixi" title="pixi.js" /></a>
<input type="button" id="rnd" value="Randomise" />
<div id="sx">SX: 0<br />SY: 0</div>"""
}

project(':examples:05') {
	description = "Lot o' Sprites 2"
	ext.title = "Pixi Morph by Photon Storm (Kotlin port)"

	ext.extraHead = """
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link rel="stylesheet" href="storm.css">
"""

	ext.extraBody = """
<a href="http://www.photonstorm.com"><img src="assets/photonstorm.png" width="121" height="18" id="photonstorm" title="Photon Storm" /></a>
<a href="http://www.html5gamedevs.com/topic/59-pixijs-has-landed/"><img src="assets/pixi.png" width="56" height="22" id="pixi" title="pixi.js" /></a>
"""
}

project(':examples:06') { description = "Interactivity" }

project(':examples:07') {
	description = "Transparent Renderer"

	ext.extraHead = """
<style>
  #textHolder{
    width: 400px;
	margin-top: 24px;
  }
</style>
"""

	ext.extraBody = """
<div>Note: in the original the text has the color set for the background of the canvas.
	 This is a bug in Pixi that has been fixed since.</div>

<div id="textHolder">Hi there, I'm some HTML text... blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
 blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
  blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
   blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah
    blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah</div>
"""
}

project(':examples:08') {
	description = "Multi-touch"
	ext.isFullscreen = true
}

project(':examples:09') {
	description = 'Tiling Sprite'
	ext.isFullscreen = true
}

project(':examples:10') { description = "Using text" }

project(':examples:11') {
	description = 'Render Textures'
	ext.isFullscreen = true

	ext.extraBody = """
<p>Unfortunately something changed in Pixi.JS 1.5.0 that makes this way less funky than the original.
You can track any progress on this in issue
<a href="https://github.com/GoodBoyDigital/pixi.js/issues/1005">pixi.js/1005</a></p>
"""
}
